{
  "name": "parliament2",
  "title": "Parliament2",
  "summary": "Uses Lumpy, Manta, Breakseq, Breakdancer, Delly, and CNVnator and validates the SVs through Genotyping and Visualization",
  "tags": [
    "Structural Variation",
    "WGS"
  ],
  "dxapi": "1.0.0",
  "version": "0.1.11a",
  "inputSpec": [
    {
      "name": "illumina_bam",
      "label": "Illumina Input BAM",
      "help": "The Illumina BAM file for which to call structural variants containing mapped reads.",
      "class": "file",
      "patterns": ["*.bam", "*.cram"],
      "optional": false
    },
    {
      "name": "illumina_bai",
      "label": "Illumina Index to BAMs",
      "help": "(Optional) The corresponding index for the Illumina BAM file.",
      "class": "file",
      "patterns": ["*.bai"],
      "optional": true
    },
    {
      "name": "ref_fasta",
      "label": "Reference genome in FASTA format",
      "help": "The reference file that matches the reference used to map the Illumina inputs.",
      "class": "file",
      "patterns": ["*.fa.gz", "*.fasta.gz"],
      "optional": false,
      "suggestions": [
        {
          "name": "DNAnexus Reference Genomes: AWS US-east",
          "project": "project-BQpp3Y804Y0xbyG4GJPQ01xv",
          "path": "/"
        },
        {
          "name": "DNAnexus Reference Genomes: AWS: China-north",
          "project": "project-Bxv84pQ27z999kj0jbQz0FK9",
          "path": "/"
        },
        {
          "name": "DNAnexus Reference Genomes: AWS Germany",
          "project": "project-F3zxk7Q4F30Xp8fG69K1Vppj",
          "path": "/"
        },
        {
          "name": "DNAnexus Reference Genomes: Azure West US",
          "project": "project-F0yyz6j9Jz8YpxQV8B8Kk7Zy",
          "path": "/"
        },
        {
          "name": "DNAnexus Reference Genomes: AWS Sydney",
          "project": "project-F4gXb605fKQyBq5vJBG31KGG",
          "path": "/"
        }
      ]
    },
    {
      "name": "ref_index",
      "label": "Index for reference genome",
      "help": "The index for the reference file that matches the reference used to map the Illumina inputs.",
      "class": "file",
      "patterns": ["*.fai"],
      "optional": true,
      "suggestions": [
        {
          "name": "DNAnexus Reference Genomes: AWS US-east",
          "project": "project-BQpp3Y804Y0xbyG4GJPQ01xv",
          "path": "/"
        },
        {
          "name": "DNAnexus Reference Genomes: AWS: China-north",
          "project": "project-Bxv84pQ27z999kj0jbQz0FK9",
          "path": "/"
        },
        {
          "name": "DNAnexus Reference Genomes: AWS Germany",
          "project": "project-F3zxk7Q4F30Xp8fG69K1Vppj",
          "path": "/"
        },
        {
          "name": "DNAnexus Reference Genomes: Azure West US",
          "project": "project-F0yyz6j9Jz8YpxQV8B8Kk7Zy",
          "path": "/"
        },
        {
          "name": "DNAnexus Reference Genomes: AWS Sydney",
          "project": "project-F4gXb605fKQyBq5vJBG31KGG",
          "path": "/"
        }
      ]
    },
    {
      "name": "prefix",
      "label": "Prefix to give output files",
      "help": "(Optional) If provided, all output files will start with this. If absent, the base of the BAM file name will be used.",
      "class": "string",
      "optional": true
    },
    {
      "name": "filter_short_contigs",
      "label": "Filter short contigs?",
      "help": "If selected, SV calls will not be generated on contigs shorter than 1 MB.",
      "class": "boolean",
      "optional": false,
      "default": true
    },
    {
      "name": "run_breakdancer",
      "label": "Run Breakdancer?",
      "help": "If selected, the program Breakdancer will be one of the SV callers run.",
      "class": "boolean",
      "default": true
    },
    {
      "name": "run_breakseq",
      "label": "Run Breakseq?",
      "help": "If selected, the program Breakseq2 will be one of the SV callers run.",
      "class": "boolean",
      "default": true
    },
    {
      "name": "run_manta",
      "label": "Run Manta?",
      "help": "If selected, the program Manta will be one of the SV callers run.",
      "class": "boolean",
      "default": true
    },
    {
      "name": "run_cnvnator",
      "label": "Run CNVnator?",
      "help": "If selected, the program CNVnator will be one of the SV callers run.",
      "class": "boolean",
      "default": true
    },
    {
      "name": "run_lumpy",
      "label": "Run Lumpy?",
      "help": "If selected, the program Lumpy will be one of the SV callers run.",
      "class": "boolean",
      "default": true
    },
    {
      "name": "run_delly_deletion",
      "label": "Run Delly Deletion?",
      "help": "If selected, the deletion module of the program Delly2 will be one of the SV callers run.",
      "class": "boolean",
      "default": true
    },
    {
      "name": "run_delly_insertion",
      "label": "Run Delly Insertion?",
      "help": "If selected, the insertion module of the program Delly2 will be one of the SV callers run.",
      "class": "boolean",
      "default": false
    },
    {
      "name": "run_delly_inversion",
      "label": "Run Delly Inversion?",
      "help": "If selected, the inversion module of the program Delly2 will be one of the SV callers run.",
      "class": "boolean",
      "default": false
    },
    {
      "name": "run_delly_duplication",
      "label": "Run Delly Duplication?",
      "help": "If selected, the duplication module of theprogram Delly2 will be one of the SV callers run.",
      "class": "boolean",
      "default": false
    },
    {
      "name": "run_genotype_candidates",
      "label": "Genotype Candidates?",
      "help": "If selected, candidate events determined from the individual callers will be genotyped and merged to create a consensus output.",
      "class": "boolean",
      "default": true,
      "group": "Genotyping and Visualization"
    },
    {
      "name": "run_svviz",
      "label": "Run svviz?",
      "help": "If selected, visualizations of genotyped SV events will be produced with svviz, one screenshot of support per event. For this option to take effect, Genotype Candidates must be set to True.",
      "class": "boolean",
      "default": false,
      "group": "Genotyping and Visualization"
    },
    {
      "name": "svviz_only_validated_candidates",
      "label": "Restrict svviz to Validated Candidates",
      "help": "Run svviz only on validated candidates? For this option to be relevant, Run svviz must be set to True. Setting to False will make the svviz component run longer.",
      "class": "boolean",
      "default": true,
      "group": "Genotyping and Visualization"
    },
    {
      "name": "output_log_files",
      "label": "Output Log Files",
      "help": "This will upload the log files resulting from the tools used to the project.",
      "class": "boolean",
      "default": true,
      "group": "Advanced"
    }
  ],
  "outputSpec": [
    {
      "name": "sv_caller_results",
      "label": "SV Caller Results",
      "help": "Raw output files from the individual SV callers.",
      "class": "array:file",
      "optional": false
    },
    {
      "name": "svtyped_vcfs",
      "label": "Genotyped SV VCFs",
      "help": "(Optional) A set of genotyped variant calls. The genotyping method is orthogonal to the original caller, serving as bioinformatic cross-validation. Only produced if Genotype Candidates is set to True.",
      "class": "array:file",
      "optional": true
    },
    {
      "name": "combined_genotypes",
      "label": "Combined Genotypes",
      "help": "(Optional) A file of merged, genotyped, validated SV calls. Only generated if Genotype Candidates is set to True.",
      "class": "file",
      "patterns": ["*.vcf"],
      "optional": true
    },
    {
      "name": "svviz_outputs",
      "label": "svviz Visualizations",
      "help": "(Optional) Visualizations generated with svviz on validated SV calls.",
      "class": "file",
      "patterns": ["*.tar.gz"],
      "optional": true
    },
    {
      "name": "log_files",
      "label": "Log files",
      "help": "(Optional) Output log files from BreakSeq and Manta.",
      "class": "array:file",
      "patterns": ["*.log"],
      "optional": true
    }
  ],
  "runSpec": {
    "file": "parliament2.py",
    "release": "16.04",
    "interpreter": "python2.7",
    "timeoutPolicy": {
      "main": {
        "hours": 48
      }
    },
    "distribution": "Ubuntu"
  },
  "access": {
    "network": [
      "*"
    ]
  },
  "details": {
    "upstreamProjects":[
      {
        "name": "parliament2", 
        "repoUrl": "https://github.com/dnanexus/parliament2", 
        "version": "0.1.11", 
        "license": "Apache-2.0", 
        "licenseUrl": "https://github.com/dnanexus/parliament2/blob/b492db6d740f90593fac061d3301d65fe19dce61/LICENSE",
        "author": "Samantha Zarate"
      },
      {
        "name": "BreakDancer", 
        "repoUrl": "https://github.com/genome/breakdancer",
        "version": "v1.4.3", 
        "license": "MIT", 
        "licenseUrl": "https://github.com/genome/breakdancer/blob/master/build-common/LICENSE.txt",
        "author": "Ken Chen and Xian Fan"
      },
      {
        "name": "BreakSeq2",
        "repoUrl": "https://github.com/bioinform/breakseq2/tree/master",
        "version": "v2.2", 
        "license": "BSD-2-Clause", 
        "licenseUrl": "https://github.com/bioinform/breakseq2/blob/cea3f8eca9a553ee31a1501081567dd0d594f92e/LICENSE.txt",
        "author": "Alexej Abyzov"
      },
      {
        "name": "CNVnator",
        "repoUrl": "https://github.com/abyzovlab/CNVnator",
        "version": "v0.3.3", 
        "license": "MIT", 
        "licenseUrl": "https://github.com/abyzovlab/CNVnator/blob/078684552f61984ff495bc63aa721dd90d0ce32f/license.rtf",
        "author": "Alexej Abyzov"
      },
      {
        "name": "Delly2",
        "repoUrl": "https://github.com/dellytools/delly",
        "version": "v0.7.2", 
        "license": "GPL-3.0-or-later", 
        "licenseUrl": "https://github.com/dellytools/delly/blob/08063fd5df5eb1266d6ab31decd9f6ab4861b03d/LICENSE",
        "author": "Tobias Rausch"
      },
      {
        "name": "LUMPY",
        "repoUrl": "https://github.com/arq5x/lumpy-sv",
        "version": "v0.2.13", 
        "license": "MIT", 
        "licenseUrl": "https://github.com/arq5x/lumpy-sv/blob/f194e6f7bc6722b0118d80a73cd27462fd6204d6/LICENSE",
        "author": "Ryan M Layer, Colby Chiang, Aaron R Quinlan, and Ira M Hall"
      },
      {
        "name": "manta",
        "repoUrl": "https://github.com/Illumina/manta",
        "version": "v1.4.0", 
        "license": "GPL-3.0-or-later",
        "licenseUrl": "https://github.com/Illumina/manta/blob/a7eaafedd8bb67589b8ab3efa65fdc2c1caa7e79/LICENSE.txt",
        "author": "Xiaoyu Chen"
      },
      {
        "name": "SVTyper",
        "repoUrl": "https://github.com/hall-lab/svtyper",
        "version": "v0.7.0",
        "license": "MIT",
        "licenseUrl": "https://github.com/hall-lab/svtyper/blob/5a1bb364e2ec7bb1a6ce16a9ca3d8c5d86ba0da7/LICENSE",
        "author": "Colby Chiang"
      },
      {
        "name": "svviz",
        "repoUrl": "https://github.com/svviz/svviz",
        "version": "1.5.2",
        "license": "MIT",
        "licenseUrl": "https://github.com/svviz/svviz/blob/53efd73598ce2cba151b5c64487d58647058483a/LICENSE",
        "author": "Colby Chiang"
      },
      {
        "name": "SURVIVOR",
        "repoUrl": "https://github.com/svviz/svviz",
        "version": "v1.0.3",
        "license": "MIT",
        "licenseUrl": "https://github.com/fritzsedlazeck/SURVIVOR/blob/542f9a1b61bd0f46f3ca49779e543af67b44cd14/LICENSE",
        "author": "Daniel C. Jeffares and Fritz J. Sedlazeck"
      }
    ],
    "contactOrgs": [
      "org-dnanexus"
    ],
    "citations": [
      "doi:10.1101/424267",
      "doi:10.1038/nmeth.1363",
      "doi:10.1038/ncomms8256",
      "doi:10.1101/gr.114876.110",
      "doi:10.1093/bioinformatics/bts378",
      "doi:10.1186/gb-2014-15-6-r84",
      "doi:10.1093/bioinformatics/btv710",
      "doi:10.1038/nmeth.3505",
      "doi:bioinformatics/btv478",
      "doi:10.1038/ncomms14061"
    ],
    "whatsNew": "* 0.1.11a: Upstream software documentation update.\n* 0.1.11: Resolved OOM bug breaking svviz.\n* 0.1.10: Resolved bug breaking SVTyper; added Singularity functionality; modify run on DNAnexus.\n* 0.1.9: Add more logging functionality; resolved bug breaking SVVIZ; improved documentation; migrate to all regions; more sophisticated BAM storage management; other bug fixes.\n* 0.1.8: Add optional upload of log files; update SURVIVOR; add quality scores; improved error messaging; bug fixes.\n* 0.1.7: Update CNVnator, SVTyper; bug fixes.\n* 0.1.6: Bug fixes.\n* 0.1.5: Dockerized Parliament2.\n* 0.1.0: Adding Parliament2."
  },
  "regionalOptions": {
    "aws:us-east-1": {
      "systemRequirements": {
        "*": {
          "instanceType": "mem1_ssd1_x16"
        }
      }
    },
    "aws:cn-north-1": {
      "systemRequirements": {
        "*": {
          "instanceType": "mem1_ssd1_x16"
        }
      }
    },
    "aws:ap-southeast-2": {
      "systemRequirements": {
        "*": {
          "instanceType": "mem1_ssd1_x16"
        }
      }
    },
    "aws:eu-central-1": {
      "systemRequirements": {
        "*": {
          "instanceType": "mem1_ssd1_x16"
        }
      }
    },
    "azure:westus": {
      "systemRequirements": {
        "*": {
          "instanceType": "azure:mem2_ssd1_x16"
        }
      }
    }
  },
  "openSource": true
}
